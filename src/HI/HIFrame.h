// -*- C++ -*- generated by wxGlade 0.4cvs on Thu Jun 22 14:49:26 2006
#ifndef HIFRAME_H
#define HIFRAME_H
#include <wx/wx.h>
#include <wx/image.h>
#include<vector>
#include<debug.h>
#include <Sensors/SensorsSystem.h>
#include <Sensors/FilteredReadSensors.h>
#include <WXVTKInterface/Frame3D.h>
#include<3D/Object3D.h>
#include<IO/IOMMD.h>
#include<IO/IOMCD.h>
#include<Communication/CommInterface.h>
#include <Actuators/Actuators.h>
#include "Panels/HIGridPanel.h"
#include "Timers/HIVirtualRobotTimer.h"
#include "Timers/HIMoCapTimer.h"
#include "Timers/HIMoCapOnlineTimer.h"
#include "Timers/HIMoCapOfflineTimer.h"
#include "Timers/HIScene3DTimer.h"
#include "Timers/HIReadSensorsTimer.h"
#include "Timers/HICommunicationTimer.h"
#include "Timers/HICommunicationDeviceConnectedTimer.h"
#include "Timers/HICommunicationDeviceNotConnectedTimer.h"

using namespace std;


/**
La classe determina l'interfaccia grafica
*/
class HIFrame:public wxFrame {
  public:

    HIFrame(wxWindow * parent, int id, const wxString & title,
	    const wxPoint & pos = wxDefaultPosition, const wxSize & size =
	    wxGetDisplaySize(), long style = wxDEFAULT_FRAME_STYLE);

    ~HIFrame();

  

  private:
    // begin wxGlade: HIFrame::methods
    void set_properties();
    void do_layout();
    void enableWidgets(const int *idArray, int dimension, bool enable =
		       true);
    bool startCalibrate() throw(ExceptionIdOutOfRange,
						  ExceptionSensorNoInterface,
						  ExceptionNoSensorsSystem);
    void stopCalibrate();
    
    bool startMoCap(int numMarkers);
    void stopMoCap();
    
    bool startConnection(int port, string ip) throw (ExceptionConnectionError);
    void stopConnection();

    bool startReadSensors();
    void stopReadSensors();

    bool startSimulation();
    void stopSimulation();
  
    bool loadMCD(wxString str) throw(ExceptionMCDFile);
    bool loadMCD(string str) throw(ExceptionMCDFile);

    bool saveCurrentMoCapData(string str) throw(ExceptionMCDFile);
    bool saveCurrentMoCapData(wxString str) throw(ExceptionMCDFile);

//     bool writeData() throw(ExceptionMCDFile);

    void createMediaCtrl(wxSizer* frame_grid_sizer);
    void createTimers();
    void createMenu();
    void createFrames3D();
    void readProjectVars(string projectVarFile) throw (runtime_error);


  private:
    enum ID_WIDGETS {
        //timers ids
	TIMER_ID = -1,
        TIMERSCENE3D_ID,
        TIMERVIRTUALROBOT_ID,
	TIMERREADSENSORS_ID,
        TIMERCOMMUNICATION_ID,
        TIMERMOCAP_ID,
        
        //frames3d ids
	FRAMEVIRTUALSTICKS_ID,
        FRAMEVIRTUALROBOT_ID,

	//frame ids
        GRIDPANEL_ID,
        MEDIACTRL_ID,
	CALIBRATEBUTTON_ID,
	RESETBUTTON_ID,
	SAVECALIBRATIONBUTTON_ID,
        VIRTUALSTICKBUTTON_ID,
        VIRTUALROBOTBUTTON_ID,
	MOCAPBUTTON_ID,
	SIMULATIONBUTTON_ID,
        READBUTTON_ID,
	COMBOBOX_ID,
	OPENFILE_ID,
	CONNECTION_ID,
	STARTCORTEX_ID,
        UPDATEVARS_ID,
	SHOWGRID_ID,
	EXIT_ID,
	ABOUT_ID,

        //mediactrl ids
	BEGINBUTTON_ID,
        PREVIOUSFRAMEBUTTON_ID,
	PLAYBUTTON_ID,
	STOPBUTTON_ID,
        NEXTFRAMEBUTTON_ID,
	ENDBUTTON_ID,
        LOOPBUTTON_ID,
        SLIDER_ID
    };
 
//     bool _isCalibrating;
//     bool _isSimulating;
//     bool _isCortexStarted;
//     bool _isCommunicating;
//     bool _isCapturing;
 private:

    int _sensSysSelected;

    wxString _title;

    wxMenuBar *HIFrame_menubar;
    wxStatusBar *HIFrame_statusbar;
//     MediaCtrl* _mediaCtrl;

    wxComboBox *combo_box_sensors_system;

    wxButton *button_MoCap;

    wxButton* _play;
    wxButton* _stop;
    wxButton* _beginPosition;
    wxButton* _endPosition;
    wxButton* _loop;
    wxSlider* _slider;
    wxButton* _previousPosition;
    wxButton* _nextPosition;

    HIGridPanel *_gridPanel;
    
    ReadSensors* _rS;
    SensorsSystem *_currentSensSys;
    Frame3D *_virtualStick;
    Frame3D* _virtualRobot;
    IOMMD *_fileMMD;
    IOMCD *_fileMCD;
    CommInterface *_commIntSend;
    CommInterface *_commIntSystemState;
    
    string _naisIp;
    int _naisPort;
    string _projectPath;
    string _mcdPath;
    string _mmdPath;
    string _models3dPath;
    int FPSFRAME3D;
    int FPSREADING;
    int FPSMOCAP;
    int FPSSENDDATA;
    int FPSVIRTUALROBOTDATA;
    messageType MVJOINTSTYPE;
    int MVJOINTSPARAMETER;
    

    HIScene3DTimer* _scene3DTimer;
    HIVirtualRobotTimer* _virtualRobotTimer;
    HIReadSensorsTimer* _readSensorsTimer;
    HIMoCapTimer* _moCapTimer;
    HICommunicationTimer* _commTimer;

    DECLARE_EVENT_TABLE();

  public:
    void OnCalibrate(wxCommandEvent & event);
    void OnReset(wxCommandEvent & event);
    void OnComboBox(wxCommandEvent & event);
    void OnSaveCalibration(wxCommandEvent & event);
    void OnVirtualStickModel(wxCommandEvent & event);
    void OnVirtualRobotModel(wxCommandEvent & event);
    void OnSimulation(wxCommandEvent & event);
    void OnOpenFile(wxCommandEvent & event);
    void OnConnection(wxCommandEvent & event);
    void OnStartCortex(wxCommandEvent & event);
    void OnShowGrid(wxCommandEvent & event);
    void OnMoCap(wxCommandEvent & event);
    void OnRead(wxCommandEvent & event);
    void OnCloseWindow(wxCloseEvent & event);
    void OnExit(wxCommandEvent & event);
//     void OnTimer(wxTimerEvent& event);
    void OnTimerOfflineMocap(wxTimerEvent& event);
    void OnReadProjectVars(wxCommandEvent & event);

    //MediaCtrl
    void OnPlay(wxCommandEvent &event);
    void OnStop(wxCommandEvent &event);
    void OnBegin(wxCommandEvent &event);
    void OnEnd(wxCommandEvent &event);
    void OnLoop(wxCommandEvent &event);
    void OnSlider(wxCommandEvent &event);
    void OnPreviousFrame(wxCommandEvent &event);
    void OnNextFrame(wxCommandEvent &event);
    void connectionProblem(int idTimer);
};


#endif
